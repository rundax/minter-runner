# This is a TOML config file.
# For more information, see https://github.com/toml-lang/toml

##### main base config options #####

# A custom human readable name for this node
moniker = "{{ general.moniker }}"

# Address to listen for API connections
api_listen_addr = "tcp://0.0.0.0:8841"

# Address to listen for gRPC connections
grpc_listen_addr = "tcp://0.0.0.0:8842"

# Address to listen for API V2 connections
api_v2_listen_addr = "tcp://0.0.0.0:8843"

# Sets node to be in validator mode. Disables API, events, history of blocks, indexes, etc.
validator_mode = {{ general.validator_mode }}

# Sets number of last stated to be saved
keep_last_states = {{ general.keep_last_states }}

# State cache size
state_cache_size = {{ general.state_cache_size }}

# State memory in MB
state_mem_available = 1024

# Limit for simultaneous requests to API
api_simultaneous_requests = {{ general.api_simultaneous_requests }}

# If this node is many blocks behind the tip of the chain, FastSync
# allows them to catchup quickly by downloading blocks in parallel
# and verifying their commits
fast_sync = {{ general.fast_sync }}

# Database backend: leveldb | memdb
db_backend = "{{ general.db_backend }}"

# Database directory
db_path = "{{ general.db_path }}"

# Output level for logging, including package level options
log_level = "{{ general.log_level }}"

# Output format: 'plain' (colored text) or 'json'
log_format = "{{ general.log_format }}"

# Path to file for logs, "stdout" by default
log_path = "{{ general.log_path }}"

##### additional base config options #####

# Path to the JSON file containing the private key to use as a validator in the consensus protocol
priv_validator_key_file = "config/priv_validator.json"
priv_validator_state_file = "config/priv_validator_state.json"

# Path to the JSON file containing the private key to use for node authentication in the p2p protocol
node_key_file = "config/node_key.json"

# TCP or UNIX socket address for the profiling server to listen on
prof_laddr = "{{ general.prof_laddr }}"

##### advanced configuration options #####

##### rpc server configuration options #####
[rpc]

# TCP or UNIX socket address for the RPC server to listen on
laddr = "{{ rpc.laddr }}"

# TCP or UNIX socket address for the gRPC server to listen on
# NOTE: This server only supports /broadcast_tx_commit
grpc_laddr = "{{ rpc.grpc_laddr }}"

# Maximum number of simultaneous connections.
# Does not include RPC (HTTP&WebSocket) connections. See max_open_connections
# If you want to accept more significant number than the default, make sure
# you increase your OS limits.
# 0 - unlimited.
grpc_max_open_connections = {{ rpc.grpc_max_open_connections }}

# Activate unsafe RPC commands like /dial_seeds and /unsafe_flush_mempool
unsafe = {{ rpc.unsafe }}

# Maximum number of simultaneous connections (including WebSocket).
# Does not include gRPC connections. See grpc_max_open_connections
# If you want to accept more significant number than the default, make sure
# you increase your OS limits.
# 0 - unlimited.
max_open_connections = {{ rpc.max_open_connections }}

##### peer to peer configuration options #####
[p2p]

# Address to listen for incoming connections
laddr = "{{ p2p.laddr }}"

# Address to advertise to peers for them to dial
# If empty, will use the same port as the laddr,
# and will introspect on the listener or use UPnP
# to figure out the address.
external_address = "{{ p2p.external_address }}"

# Comma separated list of seed nodes to connect to
seeds = "{{ p2p.seeds }}"

# Comma separated list of nodes to keep persistent connections to
persistent_peers = "{{ p2p.persistent_peers }}"

# UPNP port forwarding
upnp = {{ p2p.upnp }}

# Set true for strict address routability rules
addr_book_strict = {{ p2p.addr_book_strict }}

# Time to wait before flushing messages out on the connection, in ms
flush_throttle_timeout = "{{ p2p.flush_throttle_timeout }}"

# Maximum number of inbound peers
max_num_inbound_peers = {{ p2p.max_num_inbound_peers }}

# Maximum number of outbound peers to connect to, excluding persistent peers
max_num_outbound_peers = {{ p2p.max_num_outbound_peers }}

# Maximum size of a message packet payload, in bytes
max_packet_msg_payload_size = {{ p2p.max_packet_msg_payload_size }}

# Rate at which packets can be sent, in bytes/second
send_rate = {{ p2p.send_rate }}

# Rate at which packets can be received, in bytes/second
recv_rate = {{ p2p.recv_rate }}

# Set true to enable the peer-exchange reactor
pex = {{ p2p.pex }}

# Seed mode, in which node constantly crawls the network and looks for
# peers. If another node asks it for addresses, it responds and disconnects.
#
# Does not work if the peer-exchange reactor is disabled.
seed_mode = {{ p2p.seed_mode }}

# Comma separated list of peer IDs to keep private (will not be gossiped to other peers)
private_peer_ids = "{{ p2p.private_peer_ids }}"

##### mempool configuration options #####
[mempool]

broadcast = true
wal_dir = ""

# size of the mempool
size = 10000

# size of the cache (used to filter transactions we saw earlier)
cache_size = 100000

##### instrumentation configuration options #####
[instrumentation]

# When true, Prometheus metrics are served under /metrics on
# PrometheusListenAddr.
# Check out the documentation for the list of available metrics.
prometheus = true

# Address to listen for Prometheus collector(s) connections
prometheus_listen_addr = ":26660"

# Maximum number of simultaneous connections.
# If you want to accept more significant number than the default, make sure
# you increase your OS limits.
# 0 - unlimited.
max_open_connections = 0

# Instrumentation namespace
namespace = "minter"
