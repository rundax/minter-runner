# Travis caches can be manually removed if necessary. This is one of the very
# few manual operations that is possible with Travis, and it can be done by a
# Bitcoin Core GitHub member via the Travis web interface [0].
#
# Travis CI uploads the cache after the script phase of the build [1].
# However, the build is terminated without saving the cache if it takes over
# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail
# with an error and save the cache.
#
# [0] https://travis-ci.org/bitcoin/bitcoin/caches
# [1] https://docs.travis-ci.com/user/caching/#build-phases
# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts

version: ~> 1.0

dist: trusty
os: linux
#cache:
#  directories:
#    - $TRAVIS_BUILD_DIR/depends/built
#    - $TRAVIS_BUILD_DIR/depends/sdk-sources
#    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache
#    - $TRAVIS_BUILD_DIR/releases/$HOST
stages:
  - test
env:
  global:
    - KUBE_NAMESPACE_PREFIX="minter-node-runner"
    - KUBE_INGRESS_PATH="/"
    - CI_PROJECT_NAME="minter-node-runner"
#before_install:
#  - set -o errexit; source ./ci/test/00_setup_env.sh
#  - set -o errexit; source ./ci/test/03_before_install.sh
#install:
#  - set -o errexit; source ./ci/test/04_install.sh
before_script:
  - set -o errexit; source .gitlab-ci-functions/docker.sh
  - set -o errexit; source .gitlab-ci-functions/kubernetes.sh
  - set -o errexit; source .gitlab-ci-functions/mysql.sh
  - set -o errexit; source .gitlab-ci-functions/misc.sh
  - set -o errexit; source .gitlab-ci-functions/trycatch.sh

  - set -o errexit; source .pipelines/transform_from_jenkins.sh
  - set -o errexit; source .pipelines/before_step.sh

script:
  - set -o errexit; source .pipelines/build_images.sh
after_script:
  - echo $TRAVIS_COMMIT_RANGE

jobs:
  include:
    - stage: test
      name: 'ARM  [GOAL: install]  [buster]  [unit tests, no functional tests]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_arm.sh"
        QEMU_USER_CMD=""
    - stage: test
      name: 'S390x  [GOAL: install]  [buster]  [unit tests, functional tests]'
      arch: s390x  # Can disable QEMU_USER_CMD and run the tests natively without qemu
      env: >-
        FILE_ENV="./ci/test/00_setup_env_s390x.sh"
        QEMU_USER_CMD=""
    - stage: test
      name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no boost::process, no functional tests]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_win64.sh"
    - stage: test
      name: '32-bit + dash  [GOAL: install]  [CentOS 7]  [gui]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_i686_centos.sh"
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [C++17, previous releases, uses qt5 dev package and some depends packages] [unsigned char]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_native_qt5.sh"
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [focal]  [depends, sanitizers: memory (MSan)]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_native_msan.sh"
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, sanitizers: fuzzer,address,undefined]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_native_fuzz.sh"
    - stage: test
      name: 'x86_64 Linux [GOAL: install]  [focal]  [multiprocess]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_native_multiprocess.sh"
    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no wallet]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_native_nowallet.sh"
    - stage: test
      name: 'macOS 10.12  [GOAL: deploy] [no functional tests]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_mac.sh"
