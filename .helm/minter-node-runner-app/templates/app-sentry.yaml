{{ if (eq .Values.app.isValidator false) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Chart.Name }}
  labels:
    "app.kubernetes.io/name": '{{ .Chart.Name }}'
spec:
  serviceName: {{ .Chart.Name }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: {{ .Chart.Name }}-nodeport
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      initContainers:
        - name: dump-downloader
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['node', 'dump_downloader.js']
          envFrom:
            - secretRef:
                name: {{ .Values.app.secretPrefix }}-generic
          volumeMounts:
            - mountPath: '/app/data/'
              name: {{ .Values.app.secretPrefix }}-volume
      containers:
        - name: {{ .Chart.Name }}-process
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: node-api
              containerPort: 3000
            - name: node-prom-stats
              containerPort: 26660
            - name: node-p2p
              containerPort: 26656
            - name: node-rpc
              containerPort: 26657
          resources:
            requests:
              cpu: 1000m
              memory: 3Gi
          {{ if (eq .Values.persistence.enabled true) }}
          volumeMounts:
            - mountPath: '/app/data/'
              name: {{ .Values.app.secretPrefix }}-volume
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Values.app.secretPrefix }}-generic
          readinessProbe:
            httpGet:
              path: /probe/ready
              port: node-api
          livenessProbe:
           httpGet:
             path: /probe/liveness
             port: node-api
          startupProbe:
            httpGet:
              path: /probe/ready
              port: node-api
            failureThreshold: 300
            periodSeconds: 2
            initialDelaySeconds: 10
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ .Chart.Name }}
                    app.kubernetes.io/instance: {{ .Release.Name }}
                topologyKey: kubernetes.io/hostname

  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.app.secretPrefix }}-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "{{ .Values.persistence.storageClass }}"
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}
