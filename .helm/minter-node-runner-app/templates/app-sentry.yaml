{{ if (eq .Values.app.isValidator false) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}
  labels:
    helm.sh/chart-name: {{ $.Chart.Name }}
    helm.sh/chart-verion: {{ $.Chart.Version }}
    app.kubernetes.io/name: {{ $.Release.Name }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    metadata/deployed-by: {{ $.Values.metadata.deployedBy | quote }}
    metadata/pipline-url: {{ $.Values.metadata.piplineUrl | quote }}
spec:
  serviceName: {{ $.Chart.Name }}
  replicas: {{ $.Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $.Chart.Name }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $.Chart.Name }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        checksum/image-digest: {{ $.Values.image.digest | quote }}
    spec:
      terminationGracePeriodSeconds: 30

      {{- if $.Values.podSecurityContext.enabled }}
      securityContext: {{- omit $.Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}

      {{- if $.Values.image.pullSecrets }}
      imagePullSecrets: {{ toYaml $.Values.image.pullSecrets | nindent 8 }}
      {{- end }}

      initContainers:
        - name: dump-downloader
          image: "{{ $.Values.image.registry }}/{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: ['node', 'dump_downloader.js']

          envFrom:
            - secretRef:
                name: {{ $.Release.Name }}-secrets

            {{- range $value := $.Values.app.externalSecrets }}
            - secretRef:
                name: {{ $value }}
            {{- end }}

          {{ if (eq .Values.persistence.enabled true) }}
          volumeMounts:
            - mountPath: '/app/data/'
              name: {{ $.Release.Name }}-volume
          {{- end }}
      containers:
        - name: node
          image: "{{ $.Values.image.registry }}/{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          ports:
            - name: node-api
              containerPort: 3000
            - name: node-prom-stats
              containerPort: 26660
            - name: node-p2p
              containerPort: 26656
            - name: node-rpc
              containerPort: 26657

          {{- if $.Values.resources.enabled }}
          resources: {{- omit $.Values.resources "enabled" | toYaml | nindent 12 }}
          {{- end }}

          {{ if (eq .Values.persistence.enabled true) }}
          volumeMounts:
            - mountPath: '/app/data/'
              name: {{ $.Release.Name }}-volume
          {{- end }}

          envFrom:
            - secretRef:
                name: {{ $.Release.Name }}-secrets

            {{- range $value := $.Values.app.externalSecrets }}
            - secretRef:
                name: {{ $value }}
            {{- end }}

          {{- if $.Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.readinessProbe.failureThreshold }}
            successThreshold: {{ $.Values.readinessProbe.successThreshold }}
            httpGet:
              path: /probe/ready
              port: api
          {{- end }}
          {{- if $.Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.livenessProbe.failureThreshold }}
            successThreshold: {{ $.Values.livenessProbe.successThreshold }}
            httpGet:
              path: /probe/liveness
              port: api
          {{- end }}
          {{- if $.Values.startupProbe.enabled }}
          startupProbe:
            initialDelaySeconds: {{ $.Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.startupProbe.failureThreshold }}
            successThreshold: {{ $.Values.startupProbe.successThreshold }}
            httpGet:
              path: /probe/ready
              port: api
          {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ $.Chart.Name }}
                    app.kubernetes.io/instance: {{ $.Release.Name }}
                topologyKey: kubernetes.io/hostname

  volumeClaimTemplates:
    - metadata:
        name: {{ $.Release.Name }}-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "{{ $.Values.persistence.storageClass }}"
        resources:
          requests:
            storage: {{ $.Values.persistence.size | quote }}
{{- end }}
